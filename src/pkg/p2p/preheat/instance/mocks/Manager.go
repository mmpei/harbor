// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/goharbor/harbor/src/pkg/p2p/preheat/models"
	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Manager) Delete(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *Manager) Get(id int64) (*models.Metadata, error) {
	ret := _m.Called(id)

	var r0 *models.Metadata
	if rf, ok := ret.Get(0).(func(int64) *models.Metadata); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Metadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: param
func (_m *Manager) List(param *models.QueryParam) (int64, []*models.Metadata, error) {
	ret := _m.Called(param)

	var r0 []*models.Metadata
	if rf, ok := ret.Get(1).(func(*models.QueryParam) []*models.Metadata); ok {
		r0 = rf(param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(1).([]*models.Metadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(2).(func(*models.QueryParam) error); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Error(2)
	}

	return int64(ret.Int(0)), r0, r1
}

// Save provides a mock function with given fields: inst
func (_m *Manager) Save(inst *models.Metadata) (int64, error) {
	ret := _m.Called(inst)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*models.Metadata) int64); ok {
		r0 = rf(inst)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Metadata) error); ok {
		r1 = rf(inst)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: inst
func (_m *Manager) Update(inst *models.Metadata) error {
	ret := _m.Called(inst)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Metadata) error); ok {
		r0 = rf(inst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
